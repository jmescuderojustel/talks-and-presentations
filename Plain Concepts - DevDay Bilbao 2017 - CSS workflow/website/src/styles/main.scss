/*****************************************************
/* BASE STYLES
/**************************************************** */

// Cross-browser reset by Nicolas Gallagher (http://necolas.github.io/normalize.css/)
@import 'base/normalize';

// Contains rules that are global to the site. 
// Things like html font size, body background color, headings and link defaults, etc. are defined here.
// ONLY elements are allowed.
@import 'base/globals';

// Custom fonts definition
@import 'base/fonts';


/*****************************************************
/* BLOCKS
/**************************************************** */

/*

Blocks represent repeated and reusable visual patterns across the site.
Never should define an ad-hoc style for a particular view.

Each file should be named with the name of the block, and should only have classes related with that block.

Naming of blocks is based in BEM (http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/),
and the name of them should be semantic

Naming convention follows this pattern:

.block {

    &--modifier {
    }
    
    &--another-modifier {
    }

}

.another-block {

}

.block__element {
    
    &--one-modifier {
    }

    &--current-state {
    }
}

.block__another-child {
    
}

*/

@import 'blocks/icon';
@import 'blocks/button';
@import 'blocks/input';
@import 'blocks/radio';
@import 'blocks/form';
@import 'blocks/grid';
@import 'blocks/searcher';
@import 'blocks/tab';
@import 'blocks/comercial';
@import 'blocks/title';
@import 'blocks/calendar';

/*****************************************************
/* LAYOUT
/**************************************************** */

/*

Main layout of the application,

Naming of helpers & utilities are based in BEM (http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/)
and the name of them should be semantic

*/

@import 'layout/container';
@import 'layout/header';
@import 'layout/navigation';

/*****************************************************
/* UTILITIES
/**************************************************** */

/*

Helpers & utility classes must have ONLYE ONE responsability, and these classes could represent structural or skin patterns.

The naming convention follows this pattern:

.u-utility-name--modifier {}

*/

@import 'utils/text';
@import 'utils/margin';
@import 'utils/padding';
@import 'utils/flex';
@import 'utils/background';
@import 'utils/color';
